// scripts/make-admin.js
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function makeAdmin() {
  try {
    const email = process.argv[2];

    if (!email) {
      console.log("‚ùå –£–∫–∞–∂–∏—Ç–µ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
      console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/make-admin.js user@example.com");
      return;
    }

    console.log(`üîß –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å email: ${email}`);

    const user = await prisma.user.findUnique({
      where: { email },
    });

    if (!user) {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
      return;
    }

    if (user.role === "ADMIN") {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º");
      return;
    }

    const updatedUser = await prisma.user.update({
      where: { email },
      data: { role: "ADMIN" },
    });

    console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:", {
      email: updatedUser.email,
      name: updatedUser.name,
      role: updatedUser.role,
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error);
  } finally {
    await prisma.$disconnect();
  }
}

makeAdmin();
