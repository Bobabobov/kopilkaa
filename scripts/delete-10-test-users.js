// scripts/delete-10-test-users.js
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

// –ú–∞—Å—Å–∏–≤ email –∞–¥—Ä–µ—Å–æ–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const testUserEmails = [
  "alex.test@example.com",
  "maria.test@example.com",
  "dmitry.test@example.com",
  "elena.test@example.com",
  "vladimir.test@example.com",
  "anna.test@example.com",
  "sergey.test@example.com",
  "olga.test@example.com",
  "andrey.test@example.com",
  "natalia.test@example.com",
];

async function deleteTestUsers() {
  try {
    console.log("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n");

    let deletedCount = 0;

    for (const email of testUserEmails) {
      const user = await prisma.user.findUnique({
        where: { email },
      });

      if (user) {
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await prisma.user.delete({
          where: { email },
        });

        console.log(`‚úÖ –£–¥–∞–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${email})`);
        deletedCount++;
      } else {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
      }
    }

    console.log(
      `\nüéâ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${deletedCount}`,
    );
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
deleteTestUsers();



