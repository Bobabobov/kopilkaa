// scripts/create-test-users.js
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

const testUsers = [
  {
    email: "alex@test.com",
    name: "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä",
    passwordHash:
      "$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi", // password
    role: "USER",
    avatar: null,
    hideEmail: false,
    createdAt: new Date("2024-01-15"),
    lastSeen: new Date(),
  },
  {
    email: "maria@test.com",
    name: "–ú–∞—Ä–∏—è",
    passwordHash:
      "$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi", // password
    role: "USER",
    avatar: null,
    hideEmail: false,
    createdAt: new Date("2024-02-20"),
    lastSeen: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
  },
  {
    email: "dmitry@test.com",
    name: "–î–º–∏—Ç—Ä–∏–π",
    passwordHash:
      "$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi", // password
    role: "USER",
    avatar: null,
    hideEmail: true,
    createdAt: new Date("2024-03-10"),
    lastSeen: new Date(Date.now() - 24 * 60 * 60 * 1000), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
  },
  {
    email: "anna@test.com",
    name: "–ê–Ω–Ω–∞",
    passwordHash:
      "$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi", // password
    role: "USER",
    avatar: null,
    hideEmail: false,
    createdAt: new Date("2024-04-05"),
    lastSeen: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 1 –Ω–µ–¥–µ–ª—è –Ω–∞–∑–∞–¥
  },
  {
    email: "sergey@test.com",
    name: "–°–µ—Ä–≥–µ–π",
    passwordHash:
      "$2b$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi", // password
    role: "USER",
    avatar: null,
    hideEmail: false,
    createdAt: new Date("2024-05-12"),
    lastSeen: new Date("2024-05-12"), // –±—ã–ª –æ–Ω–ª–∞–π–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
  },
];

async function createTestUsers() {
  try {
    console.log("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n");

    for (const userData of testUsers) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await prisma.user.findUnique({
        where: { email: userData.email },
      });

      if (existingUser) {
        console.log(
          `‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.name} (${userData.email}) —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        );
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.create({
        data: userData,
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.name} (${user.email})`);
    }

    console.log("\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã!");
    console.log("\nüìã –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
    console.log("1. –ê–ª–µ–∫—Å–∞–Ω–¥—Ä (alex@test.com) - –æ–Ω–ª–∞–π–Ω");
    console.log("2. –ú–∞—Ä–∏—è (maria@test.com) - –±—ã–ª –æ–Ω–ª–∞–π–Ω 2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥");
    console.log(
      "3. –î–º–∏—Ç—Ä–∏–π (dmitry@test.com) - –±—ã–ª –æ–Ω–ª–∞–π–Ω 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥, email —Å–∫—Ä—ã—Ç",
    );
    console.log("4. –ê–Ω–Ω–∞ (anna@test.com) - –±—ã–ª –æ–Ω–ª–∞–π–Ω 1 –Ω–µ–¥–µ–ª—é –Ω–∞–∑–∞–¥");
    console.log("5. –°–µ—Ä–≥–µ–π (sergey@test.com) - –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª –æ–Ω–ª–∞–π–Ω");
    console.log("\nüîë –ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: password");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestUsers();
