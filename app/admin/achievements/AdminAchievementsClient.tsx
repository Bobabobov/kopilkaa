// app/admin/achievements/AdminAchievementsClient.tsx
"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import Link from "next/link";
import { Achievement } from "@/lib/achievements/types";
import { LucideIcons } from "@/components/ui/LucideIcons";
import UniversalBackground from "@/components/ui/UniversalBackground";
import { AchievementCard } from "@/components/achievements";

export default function AdminAchievementsClient() {
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –§–∏–ª—å—Ç—Ä—ã
  const [searchQuery, setSearchQuery] = useState("");
  const [rarityFilter, setRarityFilter] = useState<string>("ALL");
  const [typeFilter, setTypeFilter] = useState<string>("ALL");
  const [activeFilter, setActiveFilter] = useState<string>("ALL");

  // –ú–æ–¥–∞–ª–∫–∏
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [showInitModal, setShowInitModal] = useState(false);

  useEffect(() => {
    loadAchievements();
  }, []);

  const loadAchievements = async () => {
    try {
      setLoading(true);
      setError(null);

      const response = await fetch("/api/admin/achievements");
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        setAchievements(data.data || []);
      } else {
        setError(data.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
      }
    } catch (err) {
      console.error("Failed to load achievements:", err);
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
    } finally {
      setLoading(false);
    }
  };

  const handleInitializeAchievements = async () => {
    try {
      const response = await fetch("/api/admin/achievements/init", {
        method: "POST",
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      if (data.success) {
        alert(`–£—Å–ø–µ—à–Ω–æ! ${data.message}`);
        setShowInitModal(false);
        loadAchievements();
      } else {
        alert(data.error || "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
      }
    } catch (err) {
      console.error("Failed to initialize achievements:", err);
      alert("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const filteredAchievements = achievements.filter((achievement) => {
    const matchesSearch = achievement.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         achievement.description.toLowerCase().includes(searchQuery.toLowerCase());
    
    const matchesRarity = rarityFilter === "ALL" || achievement.rarity === rarityFilter;
    const matchesType = typeFilter === "ALL" || achievement.type === typeFilter;
    const matchesActive = activeFilter === "ALL" || 
                         (activeFilter === "ACTIVE" && achievement.isActive) ||
                         (activeFilter === "INACTIVE" && !achievement.isActive);

    return matchesSearch && matchesRarity && matchesType && matchesActive;
  });

  return (
    <div className="min-h-screen">
      <UniversalBackground />

      <div className="relative z-10">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="container mx-auto px-4 pt-24 pb-8">
          <div className="flex items-center justify-between mb-8">
            <div>
              <h1 className="text-4xl font-bold mb-2" style={{ color: "#fffffe" }}>
                üèÜ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
              </h1>
              <p className="text-lg" style={{ color: "#abd1c6" }}>
                –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
              </p>
            </div>
            
            {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
            <div className="flex gap-2">
              <Link
                href="/admin"
                className="px-4 py-2 bg-[#abd1c6] text-[#001e1d] font-semibold rounded-lg hover:bg-[#abd1c6]/90 transition-colors"
              >
                –ó–∞—è–≤–∫–∏
              </Link>
              <Link
                href="/admin/achievements"
                className="px-4 py-2 bg-[#f9bc60] text-[#001e1d] font-semibold rounded-lg hover:bg-[#f9bc60]/90 transition-colors"
              >
                –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              </Link>
              <Link
                href="/admin/ads"
                className="px-4 py-2 bg-[#abd1c6] text-[#001e1d] font-semibold rounded-lg hover:bg-[#abd1c6]/90 transition-colors"
              >
                –†–µ–∫–ª–∞–º–∞
              </Link>
            </div>
          </div>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-[#abd1c6]/20 rounded-xl flex items-center justify-center">
                  <LucideIcons.Star className="text-[#abd1c6]" size="sm" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-[#fffffe]">{achievements.length}</div>
                  <div className="text-sm text-[#abd1c6]">–í—Å–µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</div>
                </div>
              </div>
            </div>

            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-[#f9bc60]/20 rounded-xl flex items-center justify-center">
                  <LucideIcons.CheckCircle className="text-[#f9bc60]" size="sm" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-[#fffffe]">
                    {achievements.filter(a => a.isActive).length}
                  </div>
                  <div className="text-sm text-[#abd1c6]">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                </div>
              </div>
            </div>

            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-[#e16162]/20 rounded-xl flex items-center justify-center">
                  <LucideIcons.XCircle className="text-[#e16162]" size="sm" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-[#fffffe]">
                    {achievements.filter(a => !a.isActive).length}
                  </div>
                  <div className="text-sm text-[#abd1c6]">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö</div>
                </div>
              </div>
            </div>

            <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 bg-[#f9bc60]/20 rounded-xl flex items-center justify-center">
                  <LucideIcons.Rocket className="text-[#f9bc60]" size="sm" />
                </div>
                <div>
                  <div className="text-2xl font-bold text-[#fffffe]">
                    {achievements.filter(a => a.isExclusive).length}
                  </div>
                  <div className="text-sm text-[#abd1c6]">–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö</div>
                </div>
              </div>
            </div>
          </div>

          {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
          <div className="bg-white/5 backdrop-blur-sm rounded-2xl p-6 border border-white/10 mb-8">
            <div className="flex flex-wrap items-center gap-4 mb-6">
              <div className="flex-1 min-w-64">
                <input
                  type="text"
                  placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="w-full px-4 py-2 bg-[#001e1d]/50 border border-[#abd1c6]/20 rounded-xl text-[#fffffe] placeholder-[#abd1c6]/50 focus:border-[#f9bc60] focus:outline-none"
                />
              </div>

              <select
                value={rarityFilter}
                onChange={(e) => setRarityFilter(e.target.value)}
                className="px-4 py-2 bg-[#001e1d]/50 border border-[#abd1c6]/20 rounded-xl text-[#fffffe] focus:border-[#f9bc60] focus:outline-none"
              >
                <option value="ALL">–í—Å–µ —Ä–µ–¥–∫–æ—Å—Ç–∏</option>
                <option value="COMMON">–û–±—ã—á–Ω—ã–µ</option>
                <option value="RARE">–†–µ–¥–∫–∏–µ</option>
                <option value="EPIC">–≠–ø–∏—á–µ—Å–∫–∏–µ</option>
                <option value="LEGENDARY">–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ</option>
                <option value="EXCLUSIVE">–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ</option>
              </select>

              <select
                value={typeFilter}
                onChange={(e) => setTypeFilter(e.target.value)}
                className="px-4 py-2 bg-[#001e1d]/50 border border-[#abd1c6]/20 rounded-xl text-[#fffffe] focus:border-[#f9bc60] focus:outline-none"
              >
                <option value="ALL">–í—Å–µ —Ç–∏–ø—ã</option>
                <option value="STREAK">–°–µ—Ä–∏–∏</option>
                <option value="APPLICATIONS">–ó–∞—è–≤–∫–∏</option>
                <option value="GAMES">–ò–≥—Ä—ã</option>
                <option value="SOCIAL">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ</option>
                <option value="SPECIAL">–û—Å–æ–±—ã–µ</option>
                <option value="COMMUNITY">–°–æ–æ–±—â–µ—Å—Ç–≤–æ</option>
                <option value="CREATIVITY">–¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ</option>
              </select>

              <select
                value={activeFilter}
                onChange={(e) => setActiveFilter(e.target.value)}
                className="px-4 py-2 bg-[#001e1d]/50 border border-[#abd1c6]/20 rounded-xl text-[#fffffe] focus:border-[#f9bc60] focus:outline-none"
              >
                <option value="ALL">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value="ACTIVE">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value="INACTIVE">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
              </select>
            </div>

            <div className="flex gap-3">
              <button
                onClick={() => setShowCreateModal(true)}
                className="px-6 py-2 bg-[#f9bc60] text-[#001e1d] font-semibold rounded-xl hover:bg-[#e8a545] transition-colors flex items-center gap-2"
              >
                <LucideIcons.Plus size="sm" />
                –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
              </button>

              <button
                onClick={() => setShowInitModal(true)}
                className="px-6 py-2 bg-[#abd1c6] text-[#001e1d] font-semibold rounded-xl hover:bg-[#abd1c6]/90 transition-colors flex items-center gap-2"
              >
                <LucideIcons.Rocket size="sm" />
                –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
              </button>

              <button
                onClick={loadAchievements}
                className="px-6 py-2 bg-white/10 text-[#fffffe] font-semibold rounded-xl hover:bg-white/20 transition-colors flex items-center gap-2"
              >
                <LucideIcons.Refresh size="sm" />
                –û–±–Ω–æ–≤–∏—Ç—å
              </button>
            </div>
          </div>

          {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
          {loading ? (
            <div className="text-center py-12">
              <div className="w-12 h-12 border-4 border-[#abd1c6] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
              <p className="text-[#abd1c6]">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...</p>
            </div>
          ) : error ? (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-[#e16162]/20 rounded-full flex items-center justify-center mx-auto mb-4">
                <LucideIcons.AlertCircle className="text-[#e16162]" size="lg" />
              </div>
              <p className="text-[#e16162] mb-4">{error}</p>
              <button
                onClick={loadAchievements}
                className="px-6 py-2 bg-[#e16162] text-white rounded-xl hover:bg-[#e16162]/90 transition-colors"
              >
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredAchievements.map((achievement) => (
                <AchievementCard
                  key={achievement.id}
                  achievement={achievement}
                  className="cursor-default"
                />
              ))}
            </div>
          )}

          {filteredAchievements.length === 0 && !loading && !error && (
            <div className="text-center py-12">
              <div className="w-16 h-16 bg-[#abd1c6]/20 rounded-full flex items-center justify-center mx-auto mb-4">
                <LucideIcons.Star className="text-[#abd1c6]" size="lg" />
              </div>
              <p className="text-[#abd1c6] text-lg mb-2">–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p className="text-[#94a1b2] text-sm mb-6">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              </p>
              <button
                onClick={() => setShowInitModal(true)}
                className="px-6 py-2 bg-[#f9bc60] text-[#001e1d] font-semibold rounded-xl hover:bg-[#e8a545] transition-colors"
              >
                –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              </button>
            </div>
          )}
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
      {showInitModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-gray-800 rounded-3xl p-8 max-w-md w-full shadow-2xl border border-gray-100 dark:border-gray-700">
            <div className="text-center">
              <div className="text-[#f9bc60] text-6xl mb-4">üöÄ</div>
              <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
              </h3>
              <p className="text-gray-600 dark:text-gray-400 mb-8">
                –°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã? –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç 25+ –≥–æ—Ç–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π.
              </p>
              <div className="flex gap-4 justify-center">
                <button
                  onClick={() => setShowInitModal(false)}
                  className="px-6 py-3 bg-white/90 backdrop-blur-xl hover:bg-gray-50 rounded-xl transition-all duration-300 font-medium shadow-lg hover:shadow-xl"
                  style={{
                    borderColor: "#abd1c6/30",
                    color: "#2d5a4e",
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                <button
                  onClick={handleInitializeAchievements}
                  className="px-6 py-3 text-white rounded-xl transition-all duration-300 font-medium shadow-lg hover:shadow-xl"
                  style={{
                    background: "linear-gradient(135deg, #f9bc60 0%, #e8a545 100%)",
                  }}
                >
                  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
