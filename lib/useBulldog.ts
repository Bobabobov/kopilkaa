// lib/useBulldog.ts
"use client";

import { useState, useEffect, useCallback } from "react";

export interface BulldogState {
  clickCount: number;
  isHappy: boolean;
  currentImage: string;
  mood: 'normal' | 'happy' | 'excited' | 'sleepy' | 'playful';
  level: number;
  experience: number;
  lastClickTime: number;
  streak: number;
}

export interface BulldogStats {
  totalClicks: number;
  sessionsPlayed: number;
  favoriteMood: string;
  longestStreak: number;
  totalPlayTime: number;
}

const MOODS = {
  normal: '/buldog/buldog1.png',
  happy: '/buldog/buldog2.png',
  excited: '/buldog/buldog3.png',
  sleepy: '/buldog/buldog4.png', // –°–æ–Ω–Ω—ã–π –±—É–ª—å–¥–æ–≥ - –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  playful: '/buldog/buldog5.png',
  surprised: '/buldog/buldog6.png'
};

// –°–ª—É—á–∞–π–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –¥–ª—è –∫–ª–∏–∫–æ–≤
const RANDOM_EMOTIONS = [
  'happy', 'excited', 'playful', 'surprised'
];


export function useBulldog() {
  const [state, setState] = useState<BulldogState>({
    clickCount: 0,
    isHappy: false,
    currentImage: MOODS.sleepy, // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - —Å–æ–Ω–Ω—ã–π –±—É–ª—å–¥–æ–≥
    mood: 'sleepy',
    level: 1,
    experience: 0,
    lastClickTime: 0,
    streak: 0
  });

  // –¢–∞–π–º–µ—Ä –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–µ—Ä–∏–∏
  const [streakTimer, setStreakTimer] = useState<NodeJS.Timeout | null>(null);

  const [stats, setStats] = useState<BulldogStats>({
    totalClicks: 0,
    sessionsPlayed: 1,
    favoriteMood: 'normal',
    longestStreak: 0,
    totalPlayTime: 0
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
  useEffect(() => {
    const savedState = localStorage.getItem('bulldog-state');
    const savedStats = localStorage.getItem('bulldog-stats');
    
    if (savedState) {
      setState(JSON.parse(savedState));
    }
    if (savedStats) {
      setStats(JSON.parse(savedStats));
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
  useEffect(() => {
    localStorage.setItem('bulldog-state', JSON.stringify(state));
  }, [state]);

  useEffect(() => {
    localStorage.setItem('bulldog-stats', JSON.stringify(stats));
  }, [stats]);

  // –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (streakTimer) {
        clearTimeout(streakTimer);
      }
    };
  }, [streakTimer]);


  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
  const getMood = useCallback((clickCount: number, streak: number): BulldogState['mood'] => {
    if (clickCount === 0 || streak === 0) return 'sleepy'; // –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å–±—Ä–æ—à–µ–Ω–Ω–∞—è —Å–µ—Ä–∏—è
    if (streak >= 10) return 'excited';
    if (streak >= 5) return 'playful';
    if (clickCount >= 50) return 'happy';
    if (clickCount >= 20) return 'normal';
    return 'sleepy';
  }, []);

  // –°–±—Ä–æ—Å —Å–µ—Ä–∏–∏ –∫–ª–∏–∫–æ–≤
  const resetStreak = useCallback(() => {
    setState(prev => {
      // –ï—Å–ª–∏ —Å–µ—Ä–∏—è —É–∂–µ 0, –Ω–µ –º–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (prev.streak === 0) {
        return prev;
      }
      
      return { 
        ...prev, 
        streak: 0,
        mood: 'sleepy',
        currentImage: MOODS.sleepy
      };
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —Å–±—Ä–æ—Å–∞ —Å–µ—Ä–∏–∏
  const startStreakTimer = useCallback(() => {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (streakTimer) {
      clearTimeout(streakTimer);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
    const timer = setTimeout(() => {
      resetStreak();
      setStreakTimer(null);
    }, 1000);

    setStreakTimer(timer);
  }, [streakTimer, resetStreak]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞
  const handleClick = useCallback(() => {
    const now = Date.now();
    const timeSinceLastClick = now - state.lastClickTime;
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä–∏—é –∫–ª–∏–∫–æ–≤ (–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ 2 —Å–µ–∫—É–Ω–¥)
    const newStreak = timeSinceLastClick < 2000 ? state.streak + 1 : 1;
    const newClickCount = state.clickCount + 1;
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —ç–º–æ—Ü–∏—é –¥–ª—è –∫–ª–∏–∫–∞
    const randomEmotion = RANDOM_EMOTIONS[Math.floor(Math.random() * RANDOM_EMOTIONS.length)];
    const newMood = getMood(newClickCount, newStreak);
    
    setState(prev => ({
      ...prev,
      clickCount: newClickCount,
      isHappy: true,
      currentImage: MOODS[randomEmotion as keyof typeof MOODS], // –°–ª—É—á–∞–π–Ω–∞—è —ç–º–æ—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ
      mood: randomEmotion as 'normal' | 'happy' | 'excited' | 'sleepy' | 'playful', // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —ç–º–æ—Ü–∏—é
      experience: prev.experience + 1,
      lastClickTime: now,
      streak: newStreak
    }));

    setStats(prev => ({
      ...prev,
      totalClicks: prev.totalClicks + 1,
      longestStreak: Math.max(prev.longestStreak, newStreak),
      favoriteMood: newMood
    }));


    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–±—Ä–æ—Å–∞ —Å–µ—Ä–∏–∏
    startStreakTimer();

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—á–∞—Å—Ç—å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setState(prev => ({
        ...prev,
        isHappy: false
      }));
    }, 2000);
  }, [state.clickCount, state.streak, state.lastClickTime, getMood, startStreakTimer]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const getMessage = useCallback(() => {
    const { clickCount, streak, mood } = state;
    
    if (streak >= 10) {
      return { text: "–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π! üî•", type: "excited" };
    }
    
    if (streak >= 5) {
      return { text: "–ì–æ—Ä—è—á–∞—è —Å–µ—Ä–∏—è! ‚ö°", type: "streak" };
    }
    
    const messages = {
      sleepy: ["–°–æ–Ω–Ω—ã–π –±—É–ª—å–¥–æ–≥... üò¥", "–í—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞ üõå", "Zzz... üí§"],
      normal: ["–•–æ—Ä–æ—à–æ! üêï", "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è! üòä", "–ù–µ –ø–ª–æ—Ö–æ! üëç"],
      happy: ["–û—Ç–ª–∏—á–Ω–æ! üéâ", "–Ø —Å—á–∞—Å—Ç–ª–∏–≤! üòÑ", "–£—Ä–∞! üéä"],
      playful: ["–î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å! üéæ", "–ï—â–µ! –ï—â–µ! üéà", "–í–µ—Å–µ–ª–æ! üé™"],
      excited: ["–í–û–û–û–û! üöÄ", "–Ø –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ! üåü", "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! ‚ö°"],
      surprised: ["–û–≥–æ! üò≤", "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ! üòÆ", "–í–∞—É! ü§Ø"]
    };
    
    const moodMessages = messages[mood];
    const randomMessage = moodMessages[Math.floor(Math.random() * moodMessages.length)];
    
    return { text: randomMessage, type: mood };
  }, [state]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
  const getLevel = useCallback(() => {
    return Math.floor(state.experience / 10) + 1;
  }, [state.experience]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
  const getLevelProgress = useCallback(() => {
    const currentLevelExp = (getLevel() - 1) * 10;
    const nextLevelExp = getLevel() * 10;
    const currentExp = state.experience - currentLevelExp;
    const expNeeded = nextLevelExp - currentLevelExp;
    
    return {
      current: currentExp,
      needed: expNeeded,
      percentage: (currentExp / expNeeded) * 100
    };
  }, [state.experience, getLevel]);

  return {
    state,
    stats,
    handleClick,
    resetStreak,
    getMessage,
    getLevel,
    getLevelProgress
  };
}
