"use client";

import React from 'react';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã (–∏–∑ —Ö—É–∫–∞ useStackGame)
interface GameState {
  isPlaying: boolean;
  isPaused: boolean;
  gameOver: boolean;
  score: number;
  bestScore: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–æ–ø—Å–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
interface StackControlsProps {
  gameState: GameState;
  onStart: () => void;
  onRestart: () => void;
  onPause: () => void;
  isPlaying: boolean;
  isPaused: boolean;
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å UI –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏ –¥–ª—è –∏–≥—Ä—ã Stack
// –°–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä—ã
const StackControls: React.FC<StackControlsProps> = ({
  gameState,
  onStart,
  onRestart,
  onPause,
  isPlaying,
  isPaused
}) => {
  return (
    <div className="stack-controls">
      <div className="controls-buttons">
        {!isPlaying && !gameState.gameOver && (
          <button 
            className="control-btn control-btn-primary"
            onClick={onStart}
          >
            üéÆ –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
          </button>
        )}

        {isPlaying && !gameState.gameOver && (
          <button 
            className="control-btn control-btn-secondary"
            onClick={onPause}
          >
            {isPaused ? '‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' : '‚è∏Ô∏è –ü–∞—É–∑–∞'}
          </button>
        )}

        {gameState.gameOver && (
          <button 
            className="control-btn control-btn-primary"
            onClick={onRestart}
          >
            üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
          </button>
        )}

        {isPlaying && !gameState.gameOver && (
          <button 
            className="control-btn control-btn-secondary"
            onClick={onRestart}
          >
            üîÑ –†–µ—Å—Ç–∞—Ä—Ç
          </button>
        )}
      </div>

      <div className="controls-info">
        <div className="info-section">
          <h4>–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:</h4>
          <div className="status-indicator">
            {gameState.gameOver && (
              <span className="status status-game-over">–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞</span>
            )}
            {isPlaying && !isPaused && !gameState.gameOver && (
              <span className="status status-playing">–ò–≥—Ä–∞–µ–º</span>
            )}
            {isPaused && !gameState.gameOver && (
              <span className="status status-paused">–ü–∞—É–∑–∞</span>
            )}
            {!isPlaying && !gameState.gameOver && (
              <span className="status status-ready">–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ</span>
            )}
          </div>
        </div>

        <div className="info-section">
          <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</h4>
          <p className="control-hint">
            {gameState.gameOver 
              ? '–ù–∞–∂–º–∏—Ç–µ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'
              : isPlaying && !gameState.gameOver
              ? '–ö–ª–∏–∫–Ω–∏—Ç–µ –∫–æ–≥–¥–∞ –±–ª–æ–∫ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å–æ —Å—Ç–æ–ø–∫–æ–π'
              : '–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å'
            }
          </p>
        </div>
      </div>
    </div>
  );
};

export default StackControls;
