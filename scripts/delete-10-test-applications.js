// scripts/delete-10-test-applications.js
const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function deleteTestApplications() {
  try {
    console.log("üóëÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...\n");

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ email
    const testUsers = await prisma.user.findMany({
      where: {
        email: {
          contains: "test@example.com",
        },
      },
    });

    if (testUsers.length === 0) {
      console.log("‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.");
      return;
    }

    const userIds = testUsers.map((user) => user.id);

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const result = await prisma.application.deleteMany({
      where: {
        userId: {
          in: userIds,
        },
      },
    });

    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫: ${result.count}`);
    console.log("üéâ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:", error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
deleteTestApplications();
