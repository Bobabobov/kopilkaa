// scripts/create-10-test-users.js
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

// –ú–∞—Å—Å–∏–≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const testUsers = [
  {
    email: 'alex.test@example.com',
    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –¢–µ—Å—Ç–æ–≤',
    password: 'password123'
  },
  {
    email: 'maria.test@example.com', 
    name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞',
    password: 'password123'
  },
  {
    email: 'dmitry.test@example.com',
    name: '–î–º–∏—Ç—Ä–∏–π –ò–≤–∞–Ω–æ–≤',
    password: 'password123'
  },
  {
    email: 'elena.test@example.com',
    name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
    password: 'password123'
  },
  {
    email: 'vladimir.test@example.com',
    name: '–í–ª–∞–¥–∏–º–∏—Ä –ö–æ–∑–ª–æ–≤',
    password: 'password123'
  },
  {
    email: 'anna.test@example.com',
    name: '–ê–Ω–Ω–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
    password: 'password123'
  },
  {
    email: 'sergey.test@example.com',
    name: '–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤',
    password: 'password123'
  },
  {
    email: 'olga.test@example.com',
    name: '–û–ª—å–≥–∞ –ù–æ–≤–∏–∫–æ–≤–∞',
    password: 'password123'
  },
  {
    email: 'andrey.test@example.com',
    name: '–ê–Ω–¥—Ä–µ–π –õ–µ–±–µ–¥–µ–≤',
    password: 'password123'
  },
  {
    email: 'natalia.test@example.com',
    name: '–ù–∞—Ç–∞–ª—å—è –°–æ–∫–æ–ª–æ–≤–∞',
    password: 'password123'
  }
];

async function createTestUsers() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ 10 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

    for (let i = 0; i < testUsers.length; i++) {
      const userData = testUsers[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const existingUser = await prisma.user.findUnique({
        where: { email: userData.email }
      });

      if (existingUser) {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
        continue;
      }

      // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
      const passwordHash = await bcrypt.hash(userData.password, 12);

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await prisma.user.create({
        data: {
          email: userData.email,
          name: userData.name,
          passwordHash: passwordHash,
          role: 'USER',
          createdAt: new Date(),
          lastSeen: new Date()
        }
      });

      console.log(`‚úÖ ${i + 1}. –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name} (${userData.email})`);
    }

    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    console.log('Email: alex.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: maria.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: dmitry.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: elena.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: vladimir.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: anna.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: sergey.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: olga.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: andrey.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    console.log('Email: natalia.test@example.com | –ü–∞—Ä–æ–ª—å: password123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createTestUsers();
