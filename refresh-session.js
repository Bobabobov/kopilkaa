const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function refreshSession() {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.findUnique({
      where: { email: 'bobov097@gmail.com' }
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', {
      email: user.email,
      name: user.name,
      role: user.role
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º lastSeen —á—Ç–æ–±—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é
    await prisma.user.update({
      where: { email: 'bobov097@gmail.com' },
      data: { lastSeen: new Date() }
    });
    
    console.log('‚úÖ –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    console.log('–¢–µ–ø–µ—Ä—å –≤—ã–π–¥–∏—Ç–µ –∏ –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –≤ —Å–∏—Å—Ç–µ–º—É');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

refreshSession();
