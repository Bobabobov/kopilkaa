// scripts/cleanup-test-data.js
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function cleanupTestData() {
  try {
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    const deletedFriendships = await prisma.friendship.deleteMany({
      where: {
        OR: [
          { requester: { email: { in: ['alex@test.com', 'maria@test.com', 'dmitry@test.com', 'anna@test.com', 'sergey@test.com'] } } },
          { receiver: { email: { in: ['alex@test.com', 'maria@test.com', 'dmitry@test.com', 'anna@test.com', 'sergey@test.com'] } } }
        ]
      }
    });

    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ ${deletedFriendships.count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è`);

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const deletedUsers = await prisma.user.deleteMany({
      where: {
        email: {
          in: ['alex@test.com', 'maria@test.com', 'dmitry@test.com', 'anna@test.com', 'sergey@test.com']
        }
      }
    });

    console.log(`üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ ${deletedUsers.count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    console.log('\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanupTestData();





