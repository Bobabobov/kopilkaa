// scripts/create-test-friendships.js
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestFriendships() {
  try {
    console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany({
      where: {
        email: {
          in: ['alex@test.com', 'maria@test.com', 'dmitry@test.com', 'anna@test.com', 'sergey@test.com']
        }
      }
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${users.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);

    // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è
    const friendships = [
      {
        requesterEmail: 'alex@test.com',
        receiverEmail: 'maria@test.com',
        status: 'ACCEPTED'
      },
      {
        requesterEmail: 'alex@test.com',
        receiverEmail: 'dmitry@test.com',
        status: 'PENDING'
      },
      {
        requesterEmail: 'anna@test.com',
        receiverEmail: 'alex@test.com',
        status: 'PENDING'
      },
      {
        requesterEmail: 'sergey@test.com',
        receiverEmail: 'maria@test.com',
        status: 'ACCEPTED'
      }
    ];

    for (const friendship of friendships) {
      const requester = users.find(u => u.email === friendship.requesterEmail);
      const receiver = users.find(u => u.email === friendship.receiverEmail);

      if (!requester || !receiver) {
        console.log(`‚ö†Ô∏è  –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –∑–∞—è–≤–∫–∏ ${friendship.requesterEmail} -> ${friendship.receiverEmail}`);
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞
      const existingFriendship = await prisma.friendship.findFirst({
        where: {
          OR: [
            { requesterId: requester.id, receiverId: receiver.id },
            { requesterId: receiver.id, receiverId: requester.id }
          ]
        }
      });

      if (existingFriendship) {
        console.log(`‚ö†Ô∏è  –ó–∞—è–≤–∫–∞ –º–µ–∂–¥—É ${requester.name} –∏ ${receiver.name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        continue;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
      await prisma.friendship.create({
        data: {
          requesterId: requester.id,
          receiverId: receiver.id,
          status: friendship.status,
          createdAt: new Date()
        }
      });

      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞: ${requester.name} -> ${receiver.name} (${friendship.status})`);
    }

    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìä –°—Ç–∞—Ç—É—Å –¥—Ä—É–∂–±—ã:');
    console.log('‚Ä¢ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –∏ –ú–∞—Ä–∏—è - –î–†–£–ó–¨–Ø ‚úÖ');
    console.log('‚Ä¢ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –î–º–∏—Ç—Ä–∏—é - –û–ñ–ò–î–ê–ï–¢ ‚è≥');
    console.log('‚Ä¢ –ê–Ω–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –∑–∞—è–≤–∫—É –ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É - –û–ñ–ò–î–ê–ï–¢ ‚è≥');
    console.log('‚Ä¢ –°–µ—Ä–≥–µ–π –∏ –ú–∞—Ä–∏—è - –î–†–£–ó–¨–Ø ‚úÖ');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestFriendships();




