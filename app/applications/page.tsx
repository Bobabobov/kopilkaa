// app/applications/page.tsx
"use client";
import { useEffect, useRef, useState } from "react";
import { useRouter } from "next/navigation";
import { motion } from "framer-motion";
import { msToHuman } from "@/lib/time";
import { LucideIcons } from "@/components/ui/LucideIcons";
import { usePageTimeTracking } from "@/lib/usePageTimeTracking";
import ProgressBar from "@/components/applications/ProgressBar";
import FormField from "@/components/ui/FormField";
import PhotoUpload from "@/components/applications/PhotoUpload";
import SuccessScreen from "@/components/applications/SuccessScreen";
import PageHeader from "@/components/applications/PageHeader";
import SubmitSection from "@/components/applications/SubmitSection";
import ApplicationPreview from "@/components/applications/ApplicationPreview";
import UniversalBackground from "@/components/ui/UniversalBackground";

type LocalImage = { file: File; url: string };

// –ö–ª—é—á –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage
const SAVE_KEY = 'application_form_data';

const LIMITS = {
  titleMax: 40,
  summaryMax: 140,
  storyMin: 200,
  storyMax: 3000,
  amountMin: 1,
  amountMax: 1000000,
  paymentMin: 10,
  paymentMax: 200,
  maxPhotos: 5,
};

export default function ApplicationsPage() {
  const router = useRouter();
  const [user, setUser] = useState<{ id: string; email: string } | null>(null);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  usePageTimeTracking({
    page: "/applications",
    enabled: true,
    sendInterval: 30000, // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  });
  const [loadingAuth, setLoadingAuth] = useState(true);
  const [title, setTitle] = useState("");
  const [summary, setSummary] = useState("");
  const [story, setStory] = useState("");
  const [amount, setAmount] = useState("");
  const [payment, setPayment] = useState("");
  const [photos, setPhotos] = useState<LocalImage[]>([]);
  const [uploading, setUploading] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  const [msg, setMsg] = useState<string | null>(null);
  const [err, setErr] = useState<string | null>(null);
  const [left, setLeft] = useState<number | null>(null); // –¥–ª—è –ª–∏–º–∏—Ç–∞ 24—á
  const [submitted, setSubmitted] = useState(false); // –¥–ª—è —ç–∫—Ä–∞–Ω–∞ —É—Å–ø–µ—Ö–∞
  const [showPreview, setShowPreview] = useState(false); // –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏
  const inputRef = useRef<HTMLInputElement | null>(null);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    try {
      const saved = localStorage.getItem(SAVE_KEY);
      if (saved) {
        const data = JSON.parse(saved);
        if (data.title) setTitle(data.title);
        if (data.summary) setSummary(data.summary);
        if (data.story) setStory(data.story);
        if (data.amount) setAmount(data.amount);
        if (data.payment) setPayment(data.payment);
      }
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    const data = { title, summary, story, amount, payment };
    try {
      localStorage.setItem(SAVE_KEY, JSON.stringify(data));
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
  }, [title, summary, story, amount, payment]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    fetch("/api/profile/me", { cache: "no-store" })
      .then((r) => r.json())
      .then((d) => {
        if (!d.user) {
          router.push("/register");
          return;
        }
        setUser(d.user);
      })
      .catch(() => router.push("/register"))
      .finally(() => setLoadingAuth(false));
  }, [router]);


  const onPickFiles = (files: FileList | null) => {
    if (!files) return;
    const arr = Array.from(files);
    const rest = Math.max(0, LIMITS.maxPhotos - photos.length);
    const toAdd = arr.slice(0, rest);
    const mapped = toAdd.map((f) => ({ file: f, url: URL.createObjectURL(f) }));
    setPhotos((p) => [...p, ...mapped]);
  };

  const onDrop = (e: React.DragEvent) => {
    e.preventDefault();
    onPickFiles(e.dataTransfer.files);
  };

  const removeAt = (i: number) =>
    setPhotos((p) => p.filter((_, idx) => idx !== i));
  const move = (i: number, dir: -1 | 1) => {
    setPhotos((p) => {
      const arr = [...p];
      const j = i + dir;
      if (j < 0 || j >= arr.length) return arr;
      const tmp = arr[i];
      arr[i] = arr[j];
      arr[j] = tmp;
      return arr;
    });
  };

  const valid =
    title.length > 0 &&
    title.length <= LIMITS.titleMax &&
    summary.length > 0 &&
    summary.length <= LIMITS.summaryMax &&
    story.length >= LIMITS.storyMin &&
    story.length <= LIMITS.storyMax &&
    amount.length > 0 &&
    parseInt(amount) >= LIMITS.amountMin &&
    parseInt(amount) <= LIMITS.amountMax &&
    payment.length >= LIMITS.paymentMin &&
    payment.length <= LIMITS.paymentMax &&
    photos.length <= LIMITS.maxPhotos;

  const uploadAll = async (): Promise<string[]> => {
    if (!photos.length) return [];
    setUploading(true);
    try {
      const fd = new FormData();

      photos.forEach((item) => {
        let file: File;

        if (item instanceof File) {
          file = item;
        } else if (item && item.file instanceof File) {
          file = item.file;
        } else {
          return;
        }

        fd.append("files", file);
      });

      const r = await fetch("/api/uploads", { method: "POST", body: fd });
      const d = await r.json();
      if (!r.ok) throw new Error(d?.error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
      return (d.files as { url: string }[]).map((f) => f.url);
    } finally {
      setUploading(false);
    }
  };

  const submit = async (e?: React.FormEvent) => {
    if (e) e.preventDefault();
    setMsg(null);
    setErr(null);

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    if (!user) {
      router.push("/register");
      return;
    }

    if (!valid) {
      setErr("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—è ‚Äî –µ—Å—Ç—å –æ—à–∏–±–∫–∏/–ª–∏–º–∏—Ç—ã");
      return;
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
    if (!showPreview) {
      setShowPreview(true);
      return;
    }

    try {
      setSubmitting(true);
      const urls = await uploadAll();
      const r = await fetch("/api/applications", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          title,
          summary,
          story,
          amount,
          payment,
          images: urls,
        }),
      });
      const d = await r.json();
      if (r.status === 401) {
        // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        router.push("/register");
        return;
      }
      if (r.status === 429 && d?.leftMs) {
        setLeft(d.leftMs);
        throw new Error("–õ–∏–º–∏—Ç: 1 –∑–∞—è–≤–∫–∞ –≤ 24 —á–∞—Å–∞");
      }
      if (!r.ok) throw new Error(d?.error || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏");

      // –£—Å–ø–µ—Ö
      setSubmitted(true);
      setShowPreview(false);
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
      setPhotos([]);
      setTitle("");
      setSummary("");
      setStory("");
      setAmount("");
      setPayment("");
      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem(SAVE_KEY);
    } catch (e: any) {
      setErr(e.message || "–û—à–∏–±–∫–∞");
      setShowPreview(false);
    } finally {
      setSubmitting(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  if (loadingAuth) {
    return (
      <motion.div
        initial={{ opacity: 0, y: 8 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.4 }}
        className="mx-auto max-w-3xl card p-6 text-center"
      >
        <div>–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...</div>
      </motion.div>
    );
  }

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º (—É–∂–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–ª–∏)
  if (!user) {
    return null;
  }

  // –≠–∫—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  if (submitted) {
    return (
      <div className="min-h-screen relative overflow-hidden">
        <UniversalBackground />
        
        
        <div className="container-p mx-auto pt-32 pb-8 relative z-10">
          <SuccessScreen onNewApplication={() => setSubmitted(false)} />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen relative overflow-hidden">
      {/* –§–æ–Ω */}
      <UniversalBackground />


      <PageHeader />

      {/* Main Content */}
      <div className="container-p mx-auto max-w-7xl relative z-10 px-4">
        <div className="grid grid-cols-1 xl:grid-cols-4 gap-8">
          {/* Left Sidebar with Tips */}
          <div className="xl:col-span-1">
            <motion.div
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.3 }}
              className="sticky top-8 space-y-6"
            >
              {/* Tips Section */}
              <div className="backdrop-blur-sm rounded-2xl p-6 border border-slate-200/50 dark:border-slate-700/30">
                <h3 className="flex items-center gap-2 text-lg font-semibold text-gray-900 dark:text-white mb-4">
                  <span className="text-emerald-500">üí°</span>
                  –°–æ–≤–µ—Ç—ã
                </h3>
                <div className="space-y-4 text-sm text-gray-600 dark:text-gray-400">
                  <div className="flex items-start gap-3">
                    <span className="text-green-500 mt-0.5 flex-shrink-0">
                      ‚úì
                    </span>
                    <span>–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å–∏—Ç—É–∞—Ü–∏–∏</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-green-500 mt-0.5 flex-shrink-0">
                      ‚úì
                    </span>
                    <span>–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-green-500 mt-0.5 flex-shrink-0">
                      ‚úì
                    </span>
                    <span>–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞</span>
                  </div>
                  <div className="flex items-start gap-3">
                    <span className="text-green-500 mt-0.5 flex-shrink-0">
                      ‚úì
                    </span>
                    <span>–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞</span>
                  </div>
                </div>
              </div>
            </motion.div>
          </div>

          {/* Main Form */}
          <div className="xl:col-span-3">
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="space-y-8"
            >

              <form className="grid gap-6" onSubmit={submit}>
                <ProgressBar
                  title={title}
                  summary={summary}
                  story={story}
                  amount={amount}
                  payment={payment}
                  photos={photos}
                />

                <div>
                  <FormField
                    type="input"
                    label="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
                    icon="Home"
                    value={title}
                    onChange={setTitle}
                    placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏..."
                    hint="–ö—Ä–∞—Ç–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–ª–µ—á–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ (–º–∞–∫—Å. 40 —Å–∏–º–≤–æ–ª–æ–≤)"
                    maxLength={LIMITS.titleMax}
                    delay={0.1}
                    required={true}
                  />
                </div>

                <div>
                  <FormField
                    type="input"
                    label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
                    icon="MessageCircle"
                    value={summary}
                    onChange={setSummary}
                    placeholder="–û—Å–Ω–æ–≤–Ω–∞—è —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ—Å—å–±—ã..."
                    hint="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ —Å–ø–∏—Å–∫–µ –∑–∞—è–≤–æ–∫ (–º–∞–∫—Å. 140 —Å–∏–º–≤–æ–ª–æ–≤)"
                    maxLength={LIMITS.summaryMax}
                    delay={0.2}
                    required={true}
                  />
                </div>

                <div>
                  <FormField
                    type="textarea"
                    label="–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è"
                    icon="FileText"
                    value={story}
                    onChange={setStory}
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≤–∞—à–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–æ—â–∏, –∫–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞..."
                    hint="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (–º–∏–Ω–∏–º—É–º 200, –º–∞–∫—Å–∏–º—É–º 3000 —Å–∏–º–≤–æ–ª–æ–≤)"
                    minLength={LIMITS.storyMin}
                    maxLength={LIMITS.storyMax}
                    delay={0.3}
                    required={true}
                  />
                </div>

                <div>
                  <FormField
                    type="input"
                    label="–°—É–º–º–∞ –∑–∞–ø—Ä–æ—Å–∞"
                    icon="DollarSign"
                    value={amount}
                    onChange={setAmount}
                    placeholder="–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö..."
                    hint="–°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 1 –¥–æ 1 000 000 —Ä—É–±–ª–µ–π)"
                    minLength={LIMITS.amountMin}
                    maxLength={7}
                    delay={0.4}
                    required={true}
                  />
                </div>

                <div>
                  <FormField
                    type="textarea"
                    label="–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏"
                    icon="CreditCard"
                    value={payment}
                    onChange={setPayment}
                    placeholder="–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤"
                    hint="–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (–º–∏–Ω–∏–º—É–º 10, –º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)"
                    minLength={LIMITS.paymentMin}
                    maxLength={LIMITS.paymentMax}
                    compact={true}
                    delay={0.5}
                    required={true}
                  />
                </div>

                <PhotoUpload
                  photos={photos}
                  onPhotosChange={setPhotos}
                  maxPhotos={LIMITS.maxPhotos}
                  delay={0.5}
                />

                <SubmitSection
                  submitting={submitting}
                  uploading={uploading}
                  left={left}
                  msg={msg}
                  err={err}
                  onSubmit={submit}
                />
              </form>
            </motion.div>
          </div>
        </div>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–∫–∏ */}
      {showPreview && (
        <ApplicationPreview
          title={title}
          summary={summary}
          story={story}
          amount={amount}
          payment={payment}
          photos={photos}
          onClose={() => setShowPreview(false)}
          onConfirm={async () => {
            setShowPreview(false);
            await submit(); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
          }}
        />
      )}
    </div>
  );
}
